<% m = measure(Metric::QUALITY_GATE_DETAILS)
   if m && !m.data.blank?
     details = JSON.parse m.data
     m.alert_status = details['level']
     raw_conditions = details['conditions']
     conditions = []
     raw_conditions.each do |condition|
       unless metric(condition['metric']).nil?
         conditions << condition
       end
     end
     alert_metric = metric(Metric::ALERT_STATUS)
   end
%>

<div class="overview"></div>

<script>
  window.overviewConf = {
    <% unless m.alert_status.blank? -%>
    gateStatus: '<%= m.alert_status -%>',
    <% end -%>

    <% if conditions.any? {|condition| condition['level'] != 'OK'} && !conditions.empty? -%>
    gateConditions: [
      <% conditions.sort_by {|condition| [ -condition['level'].length, metric(condition['metric']).short_name] }.each do |condition|

        level = condition['level']
        condition_metric = metric(condition['metric'])
        operator = message("quality_gates.operator.#{condition['op']}.short")
        period = condition['period']
        warning_value = condition['warning']
        error_value = condition['error']
        actual_value = condition['actual']
        actual_measure = ProjectMeasure.new :metric => condition_metric, :value => actual_value, :alert_status => level
        warning_measure = ProjectMeasure.new :metric => condition_metric, :value => warning_value
        error_measure = ProjectMeasure.new :metric => condition_metric, :value => error_value
      -%>
      <% unless level == 'OK' -%>
      {
        metric: '<%= condition_metric.short_name -%>',
        <% unless period.blank? -%>
        period: '<%= short_period_label(@snapshot, period) -%>',
        <% end -%>
        actualValue: '<%= actual_measure.formatted_value -%>',
        operator: '<%= operator -%>',
        level: '<%= level -%>',
        <% if level == 'WARN' -%>
        thresholdValue: '<%= warning_measure.formatted_value -%>'
        <% end -%>
        <% if level == 'ERROR' -%>
        thresholdValue: '<%= error_measure.formatted_value -%>'
        <% end -%>
      },
      <% end -%>
      <% end %>
    ],
    <% end %>

    <%
     unless @resource.qualifier == 'DEV' or @resource.qualifier == 'VW' or @resource.qualifier == 'SVW'
       quality_gate=Property.value('sonar.qualitygate', @resource && @resource.id, nil)
       unless quality_gate
         quality_gate=Property.value('sonar.qualitygate', nil, nil)
       end
       if quality_gate
         qgate = Internal.quality_gates.get(quality_gate.to_i)
    %>
    gate: '<%= quality_gate -%>',
    gateName: '<%= qgate.getName() -%>',
    <% end end %>


    <%
     ncloc = measure('ncloc')
     if ncloc
    -%>
    ncloc: '<%= ncloc.formatted_value -%>',
    <% end %>
  };

  console.log(window.overviewConf);
  require(['overview/app']);
</script>
