<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.core.qualityprofile.db.QualityProfileMapper">

  <sql id="profilesColumns">
    p.id as id,
    p.kee as kee,
    p.name as name,
    p.language as language,
    p.parent_kee as parentKee,
    p.created_at as createdAt,
    p.updated_at as updatedAt,
    p.rules_updated_at as rulesUpdatedAt
  </sql>

  <insert id="insert" parameterType="QualityProfile" keyColumn="id" useGeneratedKeys="true" keyProperty="id" >
    INSERT INTO rules_profiles (kee, parent_kee, name, language, created_at, updated_at, rules_updated_at)
    VALUES (#{kee}, #{parentKee}, #{name}, #{language}, #{createdAt}, #{updatedAt}, #{rulesUpdatedAt,})
  </insert>

  <update id="update" parameterType="QualityProfile" >
    UPDATE rules_profiles SET
    name=#{name},
    language=#{language},
    parent_kee=#{parentKee},
    updated_at=#{updatedAt},
    rules_updated_at=#{rulesUpdatedAt}
    WHERE id=#{id}
  </update>

  <update id="delete" parameterType="int" >
    DELETE FROM rules_profiles WHERE id=#{id}
  </update>

  <select id="selectAll" parameterType="map" resultType="QualityProfile">
    SELECT <include refid="profilesColumns"/>
    FROM rules_profiles p
    ORDER BY p.name, p.language
  </select>

  <select id="selectByNameAndLanguage" parameterType="map" resultType="QualityProfile">
    SELECT <include refid="profilesColumns"/>
    FROM rules_profiles p
    WHERE p.name=#{name} AND p.language=#{language}
  </select>

  <select id="selectByKey" parameterType="string" resultType="QualityProfile">
    SELECT <include refid="profilesColumns"/>
    FROM rules_profiles p
    WHERE p.kee=#{id}
  </select>

  <select id="selectByLanguage" parameterType="String" resultType="QualityProfile">
    SELECT <include refid="profilesColumns"/>
    FROM rules_profiles p
    WHERE p.language=#{language}
    ORDER BY p.name
  </select>

  <select id="selectById" parameterType="Integer" resultType="QualityProfile">
    SELECT <include refid="profilesColumns"/>
    FROM rules_profiles p
    WHERE p.id=#{id}
  </select>

  <select id="selectParent" parameterType="string" resultType="QualityProfile">
    SELECT <include refid="profilesColumns"/>
    FROM rules_profiles p
    INNER JOIN rules_profiles child ON child.parent_kee=p.kee AND child.kee=#{id}
  </select>

  <select id="selectParentById" parameterType="int" resultType="QualityProfile">
    SELECT <include refid="profilesColumns"/>
    FROM rules_profiles p
    INNER JOIN rules_profiles child ON child.parent_kee=p.kee and child.id=#{id}
  </select>

  <select id="selectChildren" parameterType="string" resultType="QualityProfile">
    SELECT <include refid="profilesColumns"/>
    FROM rules_profiles p
    WHERE p.parent_kee=#{id}
    ORDER BY p.name
  </select>

  <select id="selectDefaultProfile" parameterType="map" resultType="QualityProfile">
    SELECT <include refid="profilesColumns"/>
    FROM rules_profiles p
    INNER JOIN properties prop ON prop.prop_key=#{propKey}
      AND prop.resource_id IS NULL
      AND prop.text_value LIKE p.name
      AND p.language=#{language}
  </select>

  <select id="selectProjects" parameterType="Integer" resultType="Component">
    SELECT projects.id as id, projects.name as name, projects.kee as kee
    FROM projects projects
    LEFT JOIN properties ON properties.resource_id = projects.id
    <where>
      AND properties.resource_id IS NOT NULL
      AND properties.prop_key=#{key}
      AND properties.text_value LIKE #{value}
    </where>
  </select>

  <select id="countProjects" parameterType="Integer" resultType="Integer">
    SELECT count(projects.id)
    FROM projects projects
    LEFT JOIN properties ON properties.resource_id = projects.id
    <where>
      AND properties.resource_id IS NOT NULL
      AND properties.prop_key=#{key}
      AND properties.text_value LIKE #{value}
    </where>
  </select>

  <select id="selectByProjectIdAndLanguage" parameterType="map" resultType="QualityProfile">
    SELECT <include refid="profilesColumns"/>
    FROM rules_profiles p
    INNER JOIN properties prop ON prop.resource_id=#{projectId}
      AND prop.prop_key LIKE #{key}
      AND prop.text_value LIKE p.name
    WHERE p.language=#{language}
  </select>

  <select id="selectByProjectAndLanguage" parameterType="map" resultType="QualityProfile">
    SELECT <include refid="profilesColumns"/>
    FROM rules_profiles p, projects project
    INNER JOIN properties prop ON prop.resource_id=project.id
    <where>
      AND p.language=#{language}
      AND prop.prop_key LIKE #{propertyKey}
      AND prop.text_value LIKE p.name
      AND project.kee=#{projectKey}
    </where>
  </select>

</mapper>

